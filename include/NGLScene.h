#ifndef NGLSCENE_H_
#define NGLSCENE_H_
#include <ngl/Mat4.h>
#include <ngl/Obj.h>
#include <ngl/Vec3.h>
#include <ngl/Text.h>
#include <ngl/Transformation.h>
#include <ngl/Vec3.h>
#include "WindowParams.h"
#include "ControlPoints.h"

// this must be included after NGL includes else we get a clash with gl libs
#include <QOpenGLWindow>


// Modified from the NCCA Graphics Library:-
// Macey (2022) Blank NGL
// Accessed [22.01.2024]
// Available from // see https://github.com/NCCA/BlankNGL
// commit ccc8824

class NGLScene : public QOpenGLWindow
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we resize the window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(int _w, int _h) override;

private:

    WinParams m_win;
    ngl::Vec3 m_modelPos;
    ngl::Mat4 m_mouseGlobalTX;
    ngl::Mat4 m_view;
    ngl::Mat4 m_project;

    bool m_output = true;

    std::vector<ngl::Vec3> m_inputPointsSphere = {{0.909,  0.105, 0.405}, {-0.104, 0.105, 0.989},
                                                  {0.665,  0.12,  -0.739}, {0.909,  0.105, 0.405},
                                                  {0.6,    0.105, -0.739}, {-0.497, 0.105, -0.861},
                                                  {-0.973, 0.105, 0.207}, {-0.497, 0.105, -0.861},
                                                  {-0.973, 0.105, 0.207}, {-0.104, 0.105, 0.989},
                                                  {0.909,  0.1,   0.405}, {0,      1,     0},
                                                  {0.665,  0.105, -0.739}, {0,      1.1,   0},
                                                  {-0.497, 0.105, -0.9}, {0,      1,     0.2},
                                                  {-0.973, 0.105, 0.207}, {0,      0.9,   0},
                                                  {-0.12,  0.105, 0.989}, {-0.1,   1,     0.1},
                                                  {0.909,  0.105, 0.405}, {0,      -1,    0},
                                                  {0.665,  0.105, -0.739}, {0,      -1,    0},
                                                  {-0.497, 0.105, -0.861}, {0,      -1.2,  0},
                                                  {-0.973, 0.105, 0.207}, {-0.1,   -1,    0},
                                                  {-0.104, 0.09,  0.989}, {0,      -1,    0.2}
                                                };

    std::vector<ngl::Vec3> m_inputPointsBunny = {{1.289,  0.724,  0.22}, {0.845,  1.656,  0.22},
                                                 {0.794,  1.656,  0.22}, {0.014,  1.701,  0.261},
                                                 {0.844,  1.717,  0.22}, {0.761,  1.464,  0.797},
                                                 {1.25,   0.753,  0.22}, {1.287,  0.086,  0.22},
                                                 {1.514,  0.534,  0.22}, {1.355,  0.107,  0.22},
                                                 {-0.323, 1.793,  0.22}, {-0.548, 1.502,  0.594},
                                                 {-1.045, 1.242,  0.633}, {-0.548, 1.502,  0.594},
                                                 {-0.706, 1.522,  -0.233}, {-1.356, 1.399,  0.044},
                                                 {-1.045, 1.242,  0.633}, {-1.341, 1.328,  0.04},
                                                 {-0.706, 1.522,  -0.233}, {-0.375, 1.762,  0.233},
                                                 {0.794,  1.656,  0.22}, {0.748,  1.521,  -0.435},
                                                 {0.352,  1.226,  0.796}, {0.794,  1.656,  0.22},
                                                 {0.356,  1.232,  0.835}, {0.979,  0.645,  0.627},
                                                 {0.467,  0.056,  0.835}, {0.979,  0.645,  0.627},
                                                 {0.467,  0.056,  0.835}, {-0.154, 0.637,  0.627},
                                                 {-0.037, 1.168,  0.805}, {-0.154, 0.637,  0.728},
                                                 {-0.037, 1.168,  0.805}, {-0.132, 1.711,  0.187},
                                                 {-0.037, 1.168,  0.805}, {0.352,  1.226,  0.796},
                                                 {0.467,  0.056,  0.835}, {0.846,  0.177,  0.273},
                                                 {1.289,  0.724,  0.22}, {0.979,  0.645,  0.627},
                                                 {0.467,  0.056,  0.835}, {-0.152, 0.021,  0.91},

                                                 {-1.347, 1.345,  0.666}, {-0.993, 0.705,  0.476},
                                                 {-0.993, 0.705,  0.476}, {-0.154, 0.637,  0.728},
                                                 {-0.993, 0.705,  0.476}, {-0.543, 0.355,  0.286},
                                                 {-0.543, 0.355,  0.286}, {0.002,  -0.007, 0.81},
                                                 {-1.244, 1.391,  0.045}, {-1.008, 0.735,  -0.116},
                                                 {-0.483, 0.324,  -0.315}, {-1.008, 0.735,  -0.116},
                                                 {-1.008, 0.735,  -0.116}, {-0.993, 0.705,  0.476},

                                                 {0.748,  1.521,  -0.435}, {0.979,  0.645,  -0.627},
                                                 {0.587,  0.037,  -0.3}, {0.979,  0.645,  -0.627},
                                                 {0.587,  0.037,  -0.3}, {-0.154, 0.637,  -0.627},
                                                 {-0.037, 1.3,    -0.805}, {-0.154, 0.637,  -0.728},
                                                 {-0.037, 1.3,    -0.805}, {-0.132, 1.711,  -0.187},
                                                 {-0.037, 1.3,    -0.805}, {0.748,  1.521,  -0.435},
                                                 {0.846,  0.177,  0.273}, {0.587,  0.037,  -0.3},
                                                 {1.289,  0.724,  0.22}, {0.979,  0.645,  -0.627},
                                                 {-0.152, 0.021,  -0.91}, {0.587,  0.037,  -0.3},
                                                 {-0.152, 0.021,  -0.91}, {-0.483, 0.324,  -0.315},
                                                 {-1.008, 0.735,  -0.116}, {-0.154, 0.637,  -0.728},
                                                 {-0.483, 0.324,  -0.315},{-0.543, 0.355,  0.286}
                                                };

    int m_selectedObject = 0;
    std::unique_ptr<ngl::Text> m_text;
    std::string m_objFileName;
    std::vector<ngl::Vec3> m_inputPoints;
    std::unique_ptr<ngl::Obj> m_mesh;
    std::unique_ptr<ngl::AbstractVAO> m_vaoInputPoints;
    std::unique_ptr<ControlPoints> m_profileCurves;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event) override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event ) override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event) override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event ) override;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event) override;
    /// @brief windows parameters for mouse control etc.

    void initializeData();

    void drawOutput();
    void drawInput();
    void drawText();
};


//endOfCitation
#endif
